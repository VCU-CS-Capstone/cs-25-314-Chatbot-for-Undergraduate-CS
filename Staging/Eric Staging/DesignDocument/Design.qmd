---
title: VCU Chatbot Design Document
date: 10/24/2024
author:
    - name: Eric Simoni
      email: simonie2@vcu.edu
format:
    html:
        embed-resources: true
        html-math-method: katex
        theme: cosmo
        code-copy: true
---
# Overview

This document outlines the design and implementation strategy for integrating a chatbot aimed at assisting VCU students in navigating the Computer Science bachelor's degree program into the current VCU website.

# System Architecture

```{dot}
digraph G {
    node [shape=box];

    Cloud_Storage [label = "Cloud Strorage"];
    sqlite_Database [label="sqlite Database"];
    Chatbot [label="Chatbot"];
    Front_End [label="Front End"];

    Cloud_Storage -> sqlite_Database [label="Hosts"];
    Chatbot -> sqlite_Database [label="Queries"];
    Chatbot -> Front_End [label="Outputs"];
    Cloud_Storage -> Chatbot [label="Hosts"];

}
```

# Cross Site Implementation

The VCU Chatbot will be integrated across the VCU website to provide assistance for students navigating the Computer Science bachelor's degree program. This section details the strategy for deploying the chatbot on specific parts of the website while maintaining a consistent experience.

## Strategy for Integration

1. **Conditional Loading Based on URL Structure**

   The chatbot will be conditionally loaded based on the URL path. For example, if a URL contains `/undergraduate/`, the chatbot will be enabled, ensuring that it appears on pages related to the undergraduate program. This approach allows for a targeted deployment, ensuring that the chatbot is available where it is most relevant without affecting the rest of the site.

2. **Utilizing a Base Template for Consistency**

   For sites that use a templating system, the chatbot's inclusion can be controlled using a base template that is extended by all other templates. A flag will be passed to indicate whether the chatbot should be included based on the current page's URL or section. This setup ensures consistency in the chatbot's presentation and functionality across multiple pages.

3. **Centralized JavaScript and CSS Files**

   The chatbot's JavaScript and CSS files will be placed in a centralized location within the site's static resources. By linking these files in a common base template or conditionally based on the page, the chatbot's styling and functionality can be easily managed and updated. This also ensures that any changes made to the chatbot's behavior or appearance are automatically reflected across all pages where the chatbot is deployed.

## Implementation Steps

1. **Modify the Backend to Pass a Flag for Chatbot Inclusion**
   - Update the Flask routes to include a flag (`load_chatbot`) that indicates whether the chatbot should be loaded for a given page.
   - Example implementation:
     ```python
     @app.route('/undergraduate/<path:subpath>')
     def undergraduate_page(subpath):
         # Include the chatbot on any page under the /undergraduate/ section
         return render_template('undergraduate_template.html', load_chatbot=True)
     ```

2. **Update Templates to Include Chatbot Conditionally**
   - Modify the base template to conditionally include the chatbot’s script based on the `load_chatbot` flag:
     ```html
     <!-- base.html -->
     {% if load_chatbot %}
         <script src="{{ url_for('static', filename='chatbot.js') }}"></script>
     {% endif %}
     ```

3. **Add JavaScript Logic for Dynamic Chatbot Insertion**
   - The JavaScript file will dynamically create and insert the chatbot’s HTML structure into the webpage when it is loaded:
     ```javascript
     document.addEventListener('DOMContentLoaded', () => {
         if (window.location.pathname.includes('/undergraduate/')) {
             const chatBoxHTML = `
                 <div class="chat-container">
                     <div class="chat-header" onclick="toggleChat()">Chatbot</div>
                     <div id="chatBoxContainer">
                         <div class="chat-box" id="chatBox">
                             <!-- Messages will be displayed here -->
                         </div>
                         <div class="input-container">
                             <input type="text" id="userInput" placeholder="Type a message..." onkeydown="checkKey(event)">
                             <button onclick="sendMessage()">Send</button>
                         </div>
                     </div>
                 </div>
             `;
             document.body.insertAdjacentHTML('beforeend', chatBoxHTML);
             loadChatHistory();
         }
     });
     ```

4. **Testing and Quality Assurance**
   - Verify that the chatbot is only displayed on pages where it is intended.
   - Test across multiple devices and browsers to ensure consistent behavior.
   - Ensure that the chatbot does not interfere with existing website functionality or styles.

## Benefits of the Cross Site Implementation Strategy

- **Targeted Deployment**: The chatbot appears only in relevant sections, improving the user experience for students navigating the Computer Science bachelor's degree program.
- **Centralized Management**: JavaScript and CSS for the chatbot can be easily maintained and updated without modifying each individual page.
- **Scalability**: Additional pages or sections can be added to the chatbot's coverage by simply updating the URL checks or template logic, making the system adaptable to future requirements.

### Steps for Manual Implementation

- Incase it is needed, the way to manually implement the chatbot onto a single page is as follows.

1. **Add the Chatbot's CSS**
   - Include the stylesheet for the chatbot in the `<head>` section of each webpage:
     ```html
     <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
     ```

2. **Add the Chatbot's JavaScript**
   - Insert the JavaScript file just before the closing `</body>` tag:
     ```html
     <script src="{{ url_for('static', filename='chatbot.js') }}"></script>
     ```

3. **Load the chatbot**
    - Add a path to the flask code to allow the chatbot to work properly.
    ```python
     @app.route('/<path:subpath>')
     def undergraduate_page(subpath):
         # Include the chatbot on any page under the /undergraduate/ section
         return render_template('<page name>.html', load_chatbot=True)
     ```

<!--ARE WE HOSTING THE APP ON OUR OWN SITE???-->
# Chatbot implementation

The chatbot uses a combination of keyword matching and natural language processing techniques to understand user questions and provide relevant answers. The primary workflow involves querying a database of frequently asked questions (FAQs) about the Computer Science program and returning appropriate responses. This section outlines the steps taken by the chatbot to process a user's input, find a matching question, and generate a conversational response.

## Workflow for Querying the Database

1. **Preprocessing the User's Input**

   - The chatbot first preprocesses the user's question to standardize the text. This includes converting the input to lowercase, replacing common synonyms (such as "cs" with "computer science"), and removing any special characters or numbers.
   - Stopwords (common words like "the", "is", etc.) are also removed to focus on the meaningful keywords in the user's input.
   - The preprocessed input is then tokenized into individual words, which are used as keywords for matching.

   ```python
   def preprocess_text(text):
       # Convert text to lowercase
       text = text.lower()

       # Replace synonyms
       for abbr, full_form in synonyms.items():
           text = re.sub(r'\b' + re.escape(abbr) + r'\b', full_form, text)

       # Remove special characters and numbers
       text = re.sub(r'[^a-z\s]', '', text)

       # Tokenize and remove stopwords
       words = text.split()
       stop_words = set(stopwords.words('english'))
       words = [word for word in words if word not in stop_words]
       
       return words
   ```

2. **Retrieving FAQ Data from the Database**

   - The chatbot queries an SQLite database (`cs_faq.db`) that stores the FAQ data. The database consists of a table named `faq` with columns for `question` and `answer`.
   - When retrieving all questions from the database, the chatbot uses a SELECT query to fetch all entries from the `faq` table. This list of questions is used for keyword-based matching.

   ```python
   def get_all_questions_from_db():
       conn = sqlite3.connect('cs_faq.db')
       cursor = conn.cursor()
       cursor.execute("SELECT question FROM faq")
       questions = cursor.fetchall()
       conn.close()
       
       return [q[0] for q in questions]
   ```

3. **Matching the User's Input to a Stored Question**

   - The chatbot attempts to find the best match for the user's question by comparing the processed keywords to the preprocessed keywords of the stored FAQ questions.
   - The comparison is done using a scoring system based on the number of matching keywords between the user's input and each question in the database. The question with the highest number of matching keywords is considered the best match.
   - If the best match has a score greater than zero (indicating at least one keyword matched), the chatbot proceeds to retrieve the corresponding answer from the database. Otherwise, it returns a response indicating that no suitable answer was found.

   ```python
   def find_best_match(user_question):
       # Preprocess the user's question
       user_keywords = preprocess_text(user_question)

       # Get all questions from the database
       questions = get_all_questions_from_db()

       # Preprocess all FAQ questions
       question_keywords = [preprocess_text(q) for q in questions]

       # Find the question with the most matching keywords
       best_match = None
       best_score = 0

       for i, keywords in enumerate(question_keywords):
           common_keywords = Counter(keywords) & Counter(user_keywords)
           score = sum(common_keywords.values())

           if score > best_score:
               best_score = score
               best_match = questions[i]

       # If a good match is found, return the corresponding answer
       if best_score > 0:
           return get_answer_for_question(best_match)
       else:
           return None
   ```

4. **Retrieving the Answer for the Best-Matched Question**

   - Once the best match is identified, the chatbot queries the database to fetch the corresponding answer using a SELECT query with a WHERE clause matching the question.

   ```python
   def get_answer_for_question(question):
       conn = sqlite3.connect('cs_faq.db')
       cursor = conn.cursor()
       cursor.execute("SELECT answer FROM faq WHERE question = ?", (question,))
       result = cursor.fetchone()
       conn.close()
       
       if result:
           return result[0]
       else:
           return None
   ```

5. **Generating a Conversational Response**

   - To make the chatbot's replies more conversational, predefined phrases are randomly chosen and prepended to the answer before it is displayed. If no matching question is found, the chatbot prompts the user to try rephrasing the question.

   ```python
   def conversational_response(answer):
       conversational_phrases = [
           "Good question! ",
           "I'm glad you asked. "
       ]
       if answer:
           return random.choice(conversational_phrases) + answer
       else:
           return "I'm sorry, I couldn't find anything related to that. Could you try rephrasing or ask a different question?"
   ```

6. **User Interaction Loop**

   - The chatbot continuously interacts with the user in a loop, accepting new questions and providing responses, and when the user wants to hide the chat bot it will be easy to do by clicking on the chatbot heading.


This workflow enables the chatbot to effectively query the database, match user questions to stored FAQs, and respond in a conversational manner.


# Database Design

The chatbot database uses a streamlined, single-table design to simplify and speed up query processes, reducing the overhead associated with multi-table joins. This approach is efficient for the project’s needs, as it focuses primarily on matching user input with predefined keywords and providing relevant responses.

## Table Structure

The database table, named `faq`, contains four columns to store essential information:

1. **Keyword**: Stores the primary keyword(s) related to each FAQ entry.
2. **Data**: Holds supplementary data that may be associated with the keyword, such as relevant course codes or requirements.
3. **Response**: Contains the response text that the chatbot will use to answer the user’s query. This field is pre-populated with tailored answers for common questions related to the Computer Science program.
4. **Resource**: Stores links to additional resources, if available, providing users with direct access to more comprehensive information, such as pages from the VCU bulletin or program guidelines.


```plaintext
| keyword                     | data | response                                                                                                                                                       | resource |
|-----------------------------|------|----------------------------------------------------------------------------------------------------------------------------------------------------------------|----------|
| CS Computer Science         | null | "Provides a strong foundation in computer science with advanced studies in key areas."                                                                         | null     |
| cybersecurity concentration | null | "This is a specialized track within the Computer Science program, focusing on cybersecurity techniques and tools."                                             | null     |
| cybersecurity goal outcome  | null | "The core outcomes of the cybersecurity concentration include application of cybersecurity techniques and tools to tackle real cyber challenges."              | null     |
```

## Design Rationale

The decision to use a single-table structure was made to optimize database queries, enabling the chatbot to quickly match user input keywords to relevant responses without complex joins or multiple query operations. This design also allows for faster scalability, as new entries can be added by simply appending rows to the table.

### Example Query Workflow

1. **Keyword Matching**: The chatbot searches the `keyword` field for keywords in the user’s input.
2. **Response Retrieval**: Upon finding a matching entry, it retrieves the corresponding `response`.
3. **Resource Link**: If additional resources are available in the `resource` field, a link is provided to the user for further exploration.

This setup enables a fast and targeted response system, ideal for the chatbot’s primary goal of answering FAQs about the Computer Science program at VCU. 


# **Everything below is Subject to change based on today**
# Cloud Hosting

To ensure high availability, scalability, and efficient resource management, we are utilizing Google Cloud Platform (GCP) for hosting the VCU Chatbot. Google Cloud’s extensive suite of services offers flexible and reliable solutions tailored to the needs of web applications, making it well-suited for our chatbot's deployment.

## Services and Resources

The primary services leveraged within GCP include:

1. **Google App Engine**: Google App Engine (GAE) provides a serverless environment that allows us to deploy the chatbot without needing to manage underlying infrastructure. App Engine automatically scales to accommodate traffic, ensuring the chatbot remains responsive during high-demand periods.

2. **Google Cloud Storage**: This service is used for hosting static assets, such as JavaScript and CSS files, making them accessible to the chatbot across various pages on the VCU website. By serving these assets through Google Cloud Storage, we ensure fast loading times and easy updates across all chatbot-enabled pages.

## Security and Access Control

Google Cloud offers several security features that protect the chatbot and its data:

- **Identity and Access Management (IAM)**: IAM policies restrict access to sensitive resources, ensuring that only authorized users and services can interact with the database and application files.
- **SSL Encryption**: Data in transit between the chatbot and users is encrypted using SSL, safeguarding user interactions and queries.
- **Automated Backups**: GCP's automated backup features allow us to maintain regular backups of our database, minimizing data loss risk and ensuring service continuity.

## Deployment Workflow

1. **Development and Testing**: We use a local environment for development and testing. Once verified, the chatbot is deployed to App Engine through GCP’s command-line interface.
2. **Continuous Integration and Deployment**: GCP integrates with CI/CD pipelines, allowing us to automate deployments and maintain version control. Updates are seamlessly propagated, ensuring that users access the latest version of the chatbot without downtime.
